def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
//apply plugin: 'io.fabric'
//apply plugin: 'com.google.gms.google-services'
android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.admqr.misstory"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86'
        }
    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }

    signingConfigs {
        release {
            storeFile file('sleep.keystore')
            keyPassword 'sleepsleep'
            keyAlias 'sleep'
            storePassword 'sleepsleep'
        }

        debug {
            storeFile file('sleep.keystore')
            storePassword 'sleepsleep'
            keyAlias 'sleep'
            keyPassword 'sleepsleep'
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            useProguard true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildToolsVersion = '28.0.3'
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.github.williamwen1986:LuakitJitpack:1.0.14'
    implementation 'com.github.tianyu704:DaemonLibrary:v1.2.3'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.10'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.10'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.10'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.lzy.net:okgo:3.0.4'
    implementation 'org.greenrobot:eventbus:3.1.1'
//    implementation 'com.google.firebase:firebase-analytics:17.2.0'
}
